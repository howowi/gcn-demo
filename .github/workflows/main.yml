name: GCN CICD

on:
  push:
    branches:
      - main
      
jobs:   
  Build_Deploy_GCN_App:
    env:
      OCI_CLI_USER: ${{ secrets.OCI_CLI_USER }}
      OCI_CLI_TENANCY: ${{ secrets.OCI_CLI_TENANCY }}
      OCI_CLI_FINGERPRINT: ${{ secrets.OCI_CLI_FINGERPRINT }}
      OCI_CLI_KEY_CONTENT: ${{ secrets.OCI_CLI_KEY_CONTENT }}
      OCI_CLI_REGION: ${{ secrets.OCI_CLI_REGION }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup GraalVM
        uses: graalvm/setup-graalvm@v1
        with:
          java-version: '17.0.8'
          distribution: 'graalvm'
          github-token: ${{ secrets.GB_TOKEN }}

      - name: Cache local Maven repository
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Build and run gcn app
        run: |
          ./mvnw install -pl lib -am -e && ./mvnw package -pl oci -Dpackaging=docker -e

      - name: Get or create an OCIR Repository
        uses: oracle-actions/get-ocir-repository@v1.2.1
        id: get-ocir-repository
        with:
          name: gcn-demo-oci
          compartment: ${{ secrets.OCI_COMPARTMENT_OCID }}
  
      - name: Log into OCIR
        uses: oracle-actions/login-ocir@v1.2.1
        id: login-ocir
        with:
          auth_token: ${{ secrets.OCI_AUTH_TOKEN }}
  
      - name: Tag and push a container image
        id: tag-and-push-image
        run: |
          GIT_HASH=$(git rev-parse --short "$GITHUB_SHA")
          docker tag "gcn-demo-parent-oci:latest" "${{ steps.get-ocir-repository.outputs.repo_path }}:$GIT_HASH"
          docker push "${{ steps.get-ocir-repository.outputs.repo_path }}:$GIT_HASH"
  
      - name: Get git hash
        run: |
          echo "sha_short=$(git rev-parse --short "$GITHUB_SHA")" >> "$GITHUB_ENV"
  
      - name: Deploy via OCI DevOps Deployment Pipeline
        uses: oracle-actions/run-oci-cli-command@v1.1.1
        with:
            # The command and arguments to provide to the "oci" tool. Most commands specify a service, followed by a resource type and then an action, e.g. "iam user list --compartment-id <compartment-ocid>"
            command: devops deployment create-pipeline-deployment -d --pipeline-id ${{ secrets.OCI_DEVOPS_PIPELINE_ID }} --display-name deployment-version-${{ env.sha_short }} --deployment-arguments '{ \"items\":[{\"name\":\"IMG_TAG\", \"value\":\"$JOB_ID\"}]}'
            silent: false